#ifndef TURTLE_3D_H
#define TURTLE_3D_H
#include <cglm/cglm.h>
#include "l_system_mesh.h"

// Holds the state of a 3D "turtle" that follows instructions relative to
// itself in 3D space.
typedef struct {
  // The turtle's current location.
  vec3 position;
  // The turtle's previous location. Can be arbitrary if there is no previous
  // position.
  vec3 prev_position;
  // The current with which the turtle draws lines.
  vec4 color;
  // This determines the turtle's current orientation. Must always be
  // normalized and orthogonal.
  vec3 forward;
  vec3 up;

  // Defines a cube bounding the turtle's entire path so far. This *must* be
  // well-formed, i.e. each min component must be less than each max component.
  // The one exception to this is if no vertices have been output yet. Not
  // intended to be modified directly, instead it is modified by the
  // drawing functions.
  vec3 min_bounds;
  vec3 max_bounds;

  // The list of vertices generated by the turtle. Not intended to be modified
  // directly. (Instead use AppendSegment within drawing functions.)
  MeshVertex *vertices;
  uint32_t vertex_count;
  uint32_t vertex_capacity;
} Turtle3D;

// Allocates a new turtle, at position 0, 0, 0, with no vertices. Returns NULL
// on error. The turtle starts out facing right, with up in the positive Y
// direction.
Turtle3D* CreateTurtle3D(void);

// Destroys the given turtle, freeing any resources and vertices. The given
// pointer is no longer valid after this returns.
void DestroyTurtle3D(Turtle3D *t);

// Moves the turtle forward by the given distance. Returns 0 on error.
int MoveTurtleForward(Turtle3D *t, float distance);

// Rotates the turtle about the upward axis by the given angle. Returns 0 on
// error. Does not change the turtle's position; only its orientation.
int RotateTurtle(Turtle3D *t, float angle);

// Rotates the turtle about its right-facing axis by the given angle. Returns
// 0 on error. Does not change the turtle's position; only its orientation.
int PitchTurtle(Turtle3D *t, float angle);

// TODO: Implement functions for rotating the turtle. Use rotation matrices?

#endif  // TURTLE_3D_H
